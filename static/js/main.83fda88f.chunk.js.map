{"version":3,"sources":["UseState/index.tsx","UseEffect/index.tsx","UseMemo/index.tsx","UseCallback/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["UseState","useState","count","setCount","Fragment","href","onClick","UseEffect","useEffect","console","log","UseMemo","fastCount","setFastCount","slowCount","setSlowCount","newSlowCount","useMemo","i","computeSlowCount","functionsCounter","Set","UseCallback","otherCounter","setOtherCounter","increment","useCallback","incrementCounter2","add","size","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wJA0BeA,EAxBY,WAAO,IAAD,EACLC,mBAAS,GADJ,mBACxBC,EADwB,KACjBC,EADiB,KAG/B,OACE,kBAAC,IAAMC,SAAP,KACE,4BACE,uBAAGC,KAAK,uEAAR,aAIF,2BAAIH,GACJ,4BAAQI,QAAS,kBAAMH,EAASD,EAAQ,KAAxC,OAGA,4BAAQI,QAAS,kBAAMH,EAASD,EAAQ,KAAxC,OAGA,4BAAQI,QAAS,kBAAMH,EAAS,KAAhC,WCWSI,EA5Ba,WAAO,IAAD,EACNN,mBAAS,GADH,mBACzBC,EADyB,KAClBC,EADkB,KAOhC,OAJAK,qBAAU,WACRC,QAAQC,IAAR,qBAA0BR,OAI1B,kBAAC,IAAME,SAAP,KACE,4BACE,uBAAGC,KAAK,wEAAR,cAIF,qDAA2BH,EAA3B,KACA,4BAAQI,QAAS,kBAAMH,EAASD,EAAQ,KAAxC,OAGA,4BAAQI,QAAS,kBAAMH,EAASD,EAAQ,KAAxC,OAGA,4BAAQI,QAAS,kBAAMH,EAAS,KAAhC,WC0BSQ,EA/CW,WAAO,IAAD,EACIV,mBAAS,GADb,mBACvBW,EADuB,KACZC,EADY,OAEIZ,mBAAS,GAFb,mBAEvBa,EAFuB,KAEZC,EAFY,KAUxBC,EAAeC,mBAAQ,kBANJ,SAACH,GAExB,IADA,IAAII,EAAI,EACDA,EAAI,KAAYA,IACvB,OAAOJ,EAG0BK,CAAiBL,KAAY,CAACA,IAGjE,OACE,kBAAC,IAAMV,SAAP,KACE,4BACE,uBAAGC,KAAK,sEAAR,YAIF,mCACA,2BAAIW,GACJ,4BAAQV,QAAS,kBAAMS,EAAaD,EAAY,KAAhD,OAGA,4BAAQR,QAAS,kBAAMS,EAAaD,EAAY,KAAhD,OAGA,4BAAQR,QAAS,kBAAMS,EAAa,KAApC,SAIA,sDACA,2BAAIH,GACJ,4BAAQN,QAAS,kBAAMO,EAAaD,EAAY,KAAhD,OAGA,4BAAQN,QAAS,kBAAMO,EAAaD,EAAY,KAAhD,OAGA,4BAAQN,QAAS,kBAAMO,EAAa,KAApC,WCxCAO,EAAmB,IAAIC,IAqCdC,EAnCe,WAAO,IAAD,EACRrB,mBAAS,GADD,mBAC3BC,EAD2B,KACpBC,EADoB,OAEMF,mBAAS,GAFf,mBAE3BsB,EAF2B,KAEbC,EAFa,KAI5BC,EAAYC,uBAAY,WAC5BvB,EAASD,EAAQ,KAChB,CAACA,IAEEyB,EAAoBD,uBAAY,WACpCF,EAAgBD,EAAe,KAC9B,CAACA,IAKJ,OAHAH,EAAiBQ,IAAIH,GACrBL,EAAiBQ,IAAID,GAGnB,kBAAC,IAAMvB,SAAP,KACE,4BACE,uBAAGC,KAAK,0EAAR,gBAIF,wCAAcH,GAEd,wCAAckB,EAAiBS,MAC/B,4BAAQvB,QAASmB,GAAjB,OAGA,4BAAQnB,QAASqB,GAAjB,kBCVSG,EAhBO,WAEpB,OACE,kBAAC,IAAM1B,SAAP,KACE,4BAAI,uBAAGC,KAAK,gDAAR,gBACJ,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,QCLc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,a","file":"static/js/main.83fda88f.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst UseState: React.FC = () => {\n  const [count, setCount] = useState(0);\n\n  return (\n    <React.Fragment>\n      <h2>\n        <a href=\"https://github.com/IZUMIRU/hooks/blob/master/src/UseState/index.tsx\">\n        UseState\n        </a>\n      </h2>\n      <p>{count}</p>\n      <button onClick={() => setCount(count + 1)}>\n        Add\n      </button>\n      <button onClick={() => setCount(count - 1)}>\n        Sub\n      </button>\n      <button onClick={() => setCount(0)}>\n        Reset\n      </button>\n    </React.Fragment>\n  );\n}\n\nexport default UseState;\n","import React, { useState, useEffect } from 'react';\n\nconst UseEffect: React.FC = () => {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    console.log(`UseEffect: ${count}`);\n  });\n\n  return (\n    <React.Fragment>\n      <h2>\n        <a href=\"https://github.com/IZUMIRU/hooks/blob/master/src/UseEffect/index.tsx\">\n        UseEffect\n        </a>\n      </h2>\n      <p>console.log(UseEffect: {count})</p>\n      <button onClick={() => setCount(count + 1)}>\n        Add\n      </button>\n      <button onClick={() => setCount(count - 1)}>\n        Sub\n      </button>\n      <button onClick={() => setCount(0)}>\n        Reset\n      </button>\n    </React.Fragment>\n  );\n}\n\nexport default UseEffect;\n","import React, { useState, useMemo } from 'react';\n\nconst UseMemo: React.FC = () => {\n  const [fastCount, setFastCount] = useState(0);\n  const [slowCount, setSlowCount] = useState(0);\n\n  const computeSlowCount = (slowCount: number) => {\n    let i = 0;\n    while (i < 1000000000) i++;\n    return slowCount;\n  };\n\n  const newSlowCount = useMemo(() => computeSlowCount(slowCount), [slowCount]);\n  // const newSlowCount = computeSlowCount(slowCount);\n\n  return (\n    <React.Fragment>\n      <h2>\n        <a href=\"https://github.com/IZUMIRU/hooks/blob/master/src/UseMemo/index.tsx\">\n        UseMemo\n        </a>\n      </h2>\n      <p>slow</p>\n      <p>{newSlowCount}</p>\n      <button onClick={() => setSlowCount(slowCount + 1)}>\n        Add\n      </button>\n      <button onClick={() => setSlowCount(slowCount - 1)}>\n        Sub\n      </button>\n      <button onClick={() => setSlowCount(0)}>\n        Reset\n      </button>\n\n      <p>fast（useMemo）</p>\n      <p>{fastCount}</p>\n      <button onClick={() => setFastCount(fastCount + 1)}>\n        Add\n      </button>\n      <button onClick={() => setFastCount(fastCount - 1)}>\n        Sub\n      </button>\n      <button onClick={() => setFastCount(0)}>\n        Reset\n      </button>\n    </React.Fragment>\n  );\n};\n\nexport default UseMemo;\n","import React, { useState, useCallback } from 'react';\n\nconst functionsCounter = new Set()\n\nconst UseCallback: React.FC = () => {\n  const [count, setCount] = useState(0)\n  const [otherCounter, setOtherCounter] = useState(0)\n  \n  const increment = useCallback(() => {\n    setCount(count + 1)\n  }, [count])\n\n  const incrementCounter2 = useCallback(() => {\n    setOtherCounter(otherCounter + 1)\n  }, [otherCounter])\n\n  functionsCounter.add(increment)\n  functionsCounter.add(incrementCounter2)\n  \n  return (\n    <React.Fragment>\n      <h2>\n        <a href=\"https://github.com/IZUMIRU/hooks/blob/master/src/UseCallback/index.tsx\">\n          useCallback\n        </a>\n      </h2>\n      <p>Counter1: {count}</p>\n      {/* Initial value is 2 */}\n      <p>Counter2: {functionsCounter.size}</p>\n      <button onClick={increment}>\n        Add\n      </button>\n      <button onClick={incrementCounter2}>\n        Add Counter2\n      </button>\n    </React.Fragment>\n  )\n}\n\nexport default UseCallback;\n","import React from 'react';\nimport UseState from 'UseState';\nimport UseEffect from 'UseEffect';\nimport UseMemo from 'UseMemo';\nimport UseCallback from 'UseCallback';\n\nconst App: React.FC = () => {\n\n  return (\n    <React.Fragment>\n      <h1><a href=\"https://ja.reactjs.org/docs/hooks-intro.html\">React Hooks</a></h1>\n      <UseState />\n      <hr />\n      <UseEffect />\n      <hr />\n      <UseMemo />\n      <hr />\n      <UseCallback />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}